{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TypeSystem TypeSystem is a comprehensive data validation library that gives you: Data validation. Object serialization & deserialization. Form rendering. 100% type annotated codebase. 100% test coverage. Zero hard dependencies. Requirements Python 3.6+ Installation $ pip3 install typesystem If you'd like you use the form rendering you'll also want to install jinja2 . $ pip3 install jinja2 Quickstart import typesystem class Artist ( typesystem . Schema ): name = typesystem . String ( max_length = 100 ) class Album ( typesystem . Schema ): title = typesystem . String ( max_length = 100 ) release_date = typesystem . Date () artist = typesystem . Nested ( Artist ) album = Album . validate ({ \"title\" : \"Double Negative\" , \"release_date\" : \"2018-09-14\" , \"artist\" : { \"name\" : \"Low\" } }) print ( album ) # Album(title='Double Negative', release_date=datetime.date(2018, 9, 14), artist=Artist(name='Low')) print ( album . release_date ) # datetime.date(2018, 9, 14) print ( album [ 'release_date' ]) # '2018-09-14' print ( dict ( album )) # {'title': 'Double Negative', 'release_date': '2018-09-14', 'artist': {'name': 'Low'}}","title":"Introduction"},{"location":"#typesystem","text":"TypeSystem is a comprehensive data validation library that gives you: Data validation. Object serialization & deserialization. Form rendering. 100% type annotated codebase. 100% test coverage. Zero hard dependencies.","title":"TypeSystem"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"$ pip3 install typesystem If you'd like you use the form rendering you'll also want to install jinja2 . $ pip3 install jinja2","title":"Installation"},{"location":"#quickstart","text":"import typesystem class Artist ( typesystem . Schema ): name = typesystem . String ( max_length = 100 ) class Album ( typesystem . Schema ): title = typesystem . String ( max_length = 100 ) release_date = typesystem . Date () artist = typesystem . Nested ( Artist ) album = Album . validate ({ \"title\" : \"Double Negative\" , \"release_date\" : \"2018-09-14\" , \"artist\" : { \"name\" : \"Low\" } }) print ( album ) # Album(title='Double Negative', release_date=datetime.date(2018, 9, 14), artist=Artist(name='Low')) print ( album . release_date ) # datetime.date(2018, 9, 14) print ( album [ 'release_date' ]) # '2018-09-14' print ( dict ( album )) # {'title': 'Double Negative', 'release_date': '2018-09-14', 'artist': {'name': 'Low'}}","title":"Quickstart"},{"location":"examples/","text":"The following are examples of integrating typesystem against a Web framework. API validation & serialization from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route import typesystem import uvicorn users = [] class User ( typesystem . Schema ): username = typesystem . String ( max_length = 100 ) is_admin = typesystem . Boolean ( default = False ) async def list_users ( request ): return JSONResponse ({ \"users\" : [ dict ( user ) for user in users ]}) async def add_user ( request ): data = await request . json () user , errors = User . validate_or_error ( data ) if errors : return JSONResponse ( dict ( errors ), status_code = 400 ) users . append ( user ) return JSONResponse ( dict ( user )) app = Starlette ( routes = [ Route ( '/' , list_users , methods = [ \"GET\" ]), Route ( '/' , add_user , methods = [ \"POST\" ]), ]) if __name__ == \"__main__\" : uvicorn . run ( app ) Form rendering app.py from starlette.applications import Starlette from starlette.routing import Route , Mount from starlette.staticfiles import StaticFiles from starlette.templating import Jinja2Templates import typesystem import uvicorn forms = typesystem . Jinja2Forms ( package = \"bootstrap4\" ) templates = Jinja2Templates ( directory = \"templates\" ) statics = StaticFiles ( packages = [ \"bootstrap4\" ]) users = [] class User ( typesystem . Schema ): username = typesystem . String ( max_length = 100 ) is_admin = typesystem . Boolean ( default = False ) async def homepage ( request ): form = forms . Form ( User ) return templates . TemplateResponse ( 'index.html' , { 'users' : users , 'form' : form }) async def add_user ( request ): data = await request . form () user , errors = User . validate_or_error ( data ) if errors : form = forms . Form ( User , values = data , errors = errors ) return templates . TemplateResponse ( 'index.html' , { 'form' : form }, status_code = 400 ) users . append ( user ) return RedirectResponse ( url = request . url_for ( 'homepage' )) app = Starlette ( routes = [ Route ( '/' , homepage , methods = [ 'GET' ]), Route ( '/' , add_user , methods = [ 'POST' ]), Mount ( '/static' , app = statics , name = 'static' ) ]) if __name__ == \"__main__\" : uvicorn . run ( app ) templates/index.html","title":"Examples"},{"location":"examples/#api-validation-serialization","text":"from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route import typesystem import uvicorn users = [] class User ( typesystem . Schema ): username = typesystem . String ( max_length = 100 ) is_admin = typesystem . Boolean ( default = False ) async def list_users ( request ): return JSONResponse ({ \"users\" : [ dict ( user ) for user in users ]}) async def add_user ( request ): data = await request . json () user , errors = User . validate_or_error ( data ) if errors : return JSONResponse ( dict ( errors ), status_code = 400 ) users . append ( user ) return JSONResponse ( dict ( user )) app = Starlette ( routes = [ Route ( '/' , list_users , methods = [ \"GET\" ]), Route ( '/' , add_user , methods = [ \"POST\" ]), ]) if __name__ == \"__main__\" : uvicorn . run ( app )","title":"API validation &amp; serialization"},{"location":"examples/#form-rendering","text":"app.py from starlette.applications import Starlette from starlette.routing import Route , Mount from starlette.staticfiles import StaticFiles from starlette.templating import Jinja2Templates import typesystem import uvicorn forms = typesystem . Jinja2Forms ( package = \"bootstrap4\" ) templates = Jinja2Templates ( directory = \"templates\" ) statics = StaticFiles ( packages = [ \"bootstrap4\" ]) users = [] class User ( typesystem . Schema ): username = typesystem . String ( max_length = 100 ) is_admin = typesystem . Boolean ( default = False ) async def homepage ( request ): form = forms . Form ( User ) return templates . TemplateResponse ( 'index.html' , { 'users' : users , 'form' : form }) async def add_user ( request ): data = await request . form () user , errors = User . validate_or_error ( data ) if errors : form = forms . Form ( User , values = data , errors = errors ) return templates . TemplateResponse ( 'index.html' , { 'form' : form }, status_code = 400 ) users . append ( user ) return RedirectResponse ( url = request . url_for ( 'homepage' )) app = Starlette ( routes = [ Route ( '/' , homepage , methods = [ 'GET' ]), Route ( '/' , add_user , methods = [ 'POST' ]), Mount ( '/static' , app = statics , name = 'static' ) ]) if __name__ == \"__main__\" : uvicorn . run ( app ) templates/index.html","title":"Form rendering"}]}